<mahapps:MetroWindow x:Class="ÜbungTaschenrechner.WPF.CalculatorWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"    
        xmlns:local="clr-namespace:ÜbungTaschenrechner.WPF"
        
        xmlns:mahapps="http://metro.mahapps.com/winfx/xaml/controls"
        xmlns:iconPacks="http://metro.mahapps.com/winfx/xaml/iconpacks"
        xmlns:resx="clr-namespace:ÜbungTaschenrechner.Resources;assembly=ÜbungTaschenrechner.Resources"
        
        mc:Ignorable="d"
        Title="{x:Static resx:Resources.MainWindow_Title}" Height="Auto" Width="Auto" SizeToContent="WidthAndHeight" ResizeMode="NoResize">

    <Window.Resources>         <!--Die<Window.Resources>-Anweisung definiert eine Ressourcensammlung, die in einer WPF-Anwendung verwendet wird. Diese Ressourcensammlung kann verschiedene Elemente enthalten, einschließlich Objekte, Daten und Styles, die innerhalb der Window-Klasse wiederverwendet werden können, ohne sie in jeder XAML-Datei erneut definieren zu müssen. Eine Ressource kann auch als statische Ressource in anderen Elementen in der XAML-Datei verwendet werden. Die<Window.Resources>-Anweisung ist eine Möglichkeit, die Wiederverwendbarkeit von XAML-Code in WPF-Anwendungen zu erhöhen-->
            <AlternationConverter x:Key="AlternationConverter"/>     <!--definiert eine Ressource mit dem Schlüssel "AlternationConverter". Dieser Schlüssel kann verwendet werden, um die Ressource in anderen Teilen des XAML-Codes zu referenzieren. Der Zweck des AlternationConverters ist es, die Indexpositionen von Elementen in einer ItemsControl-Steuerelementen wie ListBox, ListView, ComboBox usw. zu verarbeiten. Wenn ein ItemsControl an den AlternationConverter gebunden ist, werden die Elemente in einer alternierenden Reihenfolge mit einer Zählung beginnend bei 0 oder einer anderen angegebenen Startzahl numeriert.-->
        <RoutedUICommand x:Key="Cmd_InputNumber"/>      <!--ist ein Befehlsobjekt, das in WPF-Anwendungen verwendet wird, um Aktionen auszuführen, wenn eine Benutzeroberflächenereignis ausgelöst wird, wie z.B. das Klicken auf eine Schaltfläche oder das Drücken einer Taste. Der Befehl ist "geroutet", d.h. er kann von jeder Stelle im visuellen Baum der Anwendung ausgerufen werden und kann bei Bedarf weitergeleitet werden, bis ein Handler den Befehl verarbeitet. Im vorliegenden Codeausschnitt wird der Befehl mit dem Schlüssel "Cmd_InputNumber" definiert, der später in der Befehlsbindung verwendet wird.-->
        <RoutedUICommand x:Key="Cmd_InputOperator"/> <!--definiert ein RoutedUICommand-Objekt mit dem Schlüssel "Cmd_InputNumber" in den Ressourcen der aktuellen Window-Instanz. RoutedUICommand ist eine Klasse in WPF, die einen Befehl darstellt, der an eine Befehlsquelle gebunden ist, und bei Bedarf an mehrere Befehlsziele weitergeleitet wird. Ein Beispiel für eine Befehlsquelle ist eine Button-Schaltfläche, die auf den Click-Ereignis reagiert und einen Befehl an eine CommandBinding-Instanz sendet, die diesen Befehl dann ausführt. Der x:Key-Wert ist ein eindeutiger Schlüssel, der verwendet wird, um auf das RoutedUICommand-Objekt in der Ressourcenauflistung zuzugreifen.-->
        <RoutedUICommand x:Key="Cmd_Equals"/>
        <RoutedUICommand x:Key="Cmd_ClearCurrentValue"/>
        <RoutedUICommand x:Key="Cmd_ClearEquation"/>
        <RoutedUICommand x:Key="Cmd_Back"/>

        <Style TargetType="Button" x:Key="buttonStyle" BasedOn="{StaticResource MahApps.Styles.Button.Flat}">
            <Setter Property="Background" Value="{DynamicResource MahApps.Brushes.Accent}"/>
            <Setter Property="Foreground" Value="{DynamicResource MahApps.Brushes.IdealForeground}"/>
            <Setter Property="Margin" Value="2"/>
            <Setter Property="FontSize" Value="30"/>
        </Style>
        <Style TargetType="Button" x:Key="OperatorButtonStyle" BasedOn="{StaticResource buttonStyle}">
            <Setter Property="Background" Value="{DynamicResource MahApps.Brushes.Accent4}"/>
        </Style>
    </Window.Resources>

    <Window.CommandBindings>
        <CommandBinding Command="{StaticResource Cmd_InputNumber}" Executed="Cmd_InputNumber_Executed" CanExecute="Cmd_InputNumber_CanExecute"/> <!--Dies ist ein XAML-Code, der ein CommandBinding-Objekt definiert, das auf den Befehl "Cmd_InputNumber" verweist. Die beiden Ereignisse "Executed" und "CanExecute" sind an das Objekt gebunden und zeigen auf die entsprechenden Methoden "Cmd_InputNumber_Executed" und "Cmd_InputNumber_CanExecute". Diese Methoden werden ausgeführt, wenn der Befehl ausgeführt wird bzw. wenn geprüft wird, ob der Befehl ausgeführt werden kann.-->
        <!--Dieser XAML-Code definiert eine CommandBinding-Sammlung innerhalb einer Window-Klasse. Ein CommandBinding wird verwendet, um eine Verbindung zwischen einem bestimmten Befehlsobjekt und einer Methode zum Ausführen oder Prüfen der Ausführbarkeit dieses Befehls herzustellen. In diesem Fall bindet die CommandBinding-Sammlung den Befehl Cmd_InputNumber an die Ereignishandler Cmd_InputNumber_Executed und Cmd_InputNumber_CanExecute. Dadurch können die Ereignisse ausgeführt werden, wenn der Befehl aufgerufen wird, und es wird geprüft, ob der Befehl ausgeführt werden kann oder nicht.-->
        <!--In XAML definiert man die Benutzeroberfläche und legt dabei unter anderem auch die Steuerelemente fest, die auf der Oberfläche angezeigt werden sollen. In diesem Beispiel wird ein CommandBinding definiert, der ein Command (in diesem Fall "Cmd_InputNumber") an eine Methode (hier "Cmd_InputNumber_Executed") bindet, die ausgeführt wird, wenn das Command ausgelöst wird. Das CanExecute-Event definiert, ob das Command ausgeführt werden kann oder nicht. Mit dieser Definition wird also eine Verbindung zwischen einem Command und einer Methode hergestellt, die ausgeführt wird, wenn das Command ausgeführt wird.-->
        <!--Execute und CanExecute sind Methoden, die in WPF-Command-Objekten definiert sind.Execute ist die Methode, die ausgeführt wird, wenn das Command-Objekt ausgeführt wird, d.h. wenn der Benutzer auf den zugehörigen Button klickt oder eine Tastenkombination drückt.CanExecute ist eine Methode, die bestimmt, ob das Command-Objekt ausgeführt werden kann oder nicht, d.h. ob der zugehörige Button aktiviert oder deaktiviert werden soll. Die CanExecute-Methode gibt einen boolschen Wert zurück, der angibt, ob das Command-Objekt ausgeführt werden kann oder nicht. Wenn CanExecute true zurückgibt, wird der zugehörige Button aktiviert, andernfalls bleibt er deaktiviert.In der XAML-Definition von CommandBinding können Executed und CanExecute Handler angegeben werden, die ausgeführt werden, wenn das Command-Objekt ausgeführt bzw. auf seine Ausführbarkeit geprüft wird.-->
        <CommandBinding Command="{StaticResource Cmd_InputOperator}" Executed="Cmd_InputOperator_Executed" CanExecute="Cmd_InputOperator_CanExecute"/>
        <CommandBinding Command="{StaticResource Cmd_Equals}" Executed="Cmd_Equals_Executed"/>
        <CommandBinding Command="{StaticResource Cmd_ClearCurrentValue}" Executed="Cmd_ClearCurrentValue_Executed" CanExecute="Cmd_ClearCurrentValue_CanExecute"/>
        <CommandBinding Command="{StaticResource Cmd_ClearEquation}" Executed="Cmd_ClearEquation_Executed" CanExecute="Cmd_ClearEquation_CanExecute"/>
        <CommandBinding Command="{StaticResource Cmd_Back}" Executed="Cmd_Back_Executed" CanExecute="Cmd_Back_CanExecute"/>

        <CommandBinding Command="Close" Executed="Cmd_Close_Executed"/>

    </Window.CommandBindings>
    <Window.InputBindings>
        <KeyBinding Key="NumPad0"  Command="{StaticResource Cmd_InputNumber}" CommandParameter="0"/>
        <KeyBinding Key="NumPad1"  Command="{StaticResource Cmd_InputNumber}" CommandParameter="1"/>
        <KeyBinding Key="NumPad2"  Command="{StaticResource Cmd_InputNumber}" CommandParameter="2"/>
        <KeyBinding Key="NumPad3"  Command="{StaticResource Cmd_InputNumber}" CommandParameter="3"/>
        <KeyBinding Key="NumPad4"  Command="{StaticResource Cmd_InputNumber}" CommandParameter="4"/>
        <KeyBinding Key="NumPad5"  Command="{StaticResource Cmd_InputNumber}" CommandParameter="5"/>
        <KeyBinding Key="NumPad6"  Command="{StaticResource Cmd_InputNumber}" CommandParameter="6"/>
        <KeyBinding Key="NumPad7"  Command="{StaticResource Cmd_InputNumber}" CommandParameter="7"/>
        <KeyBinding Key="NumPad8"  Command="{StaticResource Cmd_InputNumber}" CommandParameter="8"/>
        <KeyBinding Key="NumPad9"  Command="{StaticResource Cmd_InputNumber}" CommandParameter="9"/>
        <KeyBinding Key="OemComma" Command="{StaticResource Cmd_InputNumber}" CommandParameter=","/>
        
        <KeyBinding Key="Divide"   Command="{StaticResource Cmd_InputOperator}" CommandParameter="Divide"/>
        <KeyBinding Key="Multiply" Command="{StaticResource Cmd_InputOperator}" CommandParameter="Multiply"/>
        <KeyBinding Key="OemPlus"  Command="{StaticResource Cmd_InputOperator}" CommandParameter="Plus"/>
        <KeyBinding Key="Add"      Command="{StaticResource Cmd_InputOperator}" CommandParameter="Plus"/>        
        <KeyBinding Key="OemMinus" Command="{StaticResource Cmd_InputOperator}" CommandParameter="Minus"/>
        <KeyBinding Key="Subtract" Command="{StaticResource Cmd_InputOperator}" CommandParameter="Minus"/>
        
        
        <KeyBinding Key="Backspace" Command="{StaticResource Cmd_Back}"/>
        <KeyBinding Key="Delete"    Command="{StaticResource Cmd_ClearEquation}"/>
        <KeyBinding Key="Return"    Command="{StaticResource Cmd_Equals}"/>
    </Window.InputBindings>

    <DockPanel>
        <Menu DockPanel.Dock="Top">
            <MenuItem Header="Datei">
                <MenuItem Header="Beenden" Command="Close"/>
            </MenuItem>
        </Menu>

        <StatusBar DockPanel.Dock="Bottom">
            <StatusBarItem Content="{x:Static resx:Resources.MainWindow_StatusBar_Hello}"/>
        </StatusBar>
        
        <StackPanel DockPanel.Dock="Top" Grid.ColumnSpan="6" Margin="10">
            <ItemsControl Width="337" FontSize="25" MinHeight="30" ItemsSource="{Binding EquationSolver.Equation}" DisplayMemberPath="ValueString">
                <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                        <WrapPanel Orientation="Horizontal"/>
                    </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>
            </ItemsControl>
            <TextBox FontSize="25"  Text="{Binding CurrentValue}" IsReadOnly="True" Foreground="{DynamicResource MahApps.Brushes.ThemeForeground}"/>
        </StackPanel>

        <Grid Margin="10">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="5*"/>
                <ColumnDefinition Width="5*"/>
                <ColumnDefinition Width="5*"/>
                <ColumnDefinition Width="5*"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="9*"/>
                <RowDefinition Height="9*"/>
                <RowDefinition Height="9*"/>
                <RowDefinition Height="9*"/>
                <RowDefinition Height="9*"/>
            </Grid.RowDefinitions>

            <Button Grid.Column="0" Grid.Row="0" Content="CE" Command="{StaticResource Cmd_ClearCurrentValue}" Style="{DynamicResource OperatorButtonStyle}"/>
            <Button Grid.Column="1" Grid.Row="0" Content="C"  Command="{StaticResource Cmd_ClearEquation}" Style="{DynamicResource OperatorButtonStyle}"/>
            <!--<Button Grid.Column="2" Content="3" Grid.Row="0"  FontSize="30" Command="{StaticResource Cmd_InputNumber}" Style="{DynamicResource buttonStyle}"/>-->
            <Button Grid.Column="3" Grid.Row="0" Command="{StaticResource Cmd_Back}" Style="{DynamicResource OperatorButtonStyle}">
                <iconPacks:PackIconMaterial Kind="Backspace"/>
            </Button>

            <Button Grid.Column="0" Grid.Row="1" Content="1" Command="{StaticResource Cmd_InputNumber}" CommandParameter="1" Style="{DynamicResource buttonStyle}"/>
            <Button Grid.Column="1" Grid.Row="1" Content="2" Command="{StaticResource Cmd_InputNumber}" CommandParameter="2" Style="{DynamicResource buttonStyle}"/>
            <Button Grid.Column="2" Grid.Row="1" Content="3" Command="{StaticResource Cmd_InputNumber}" CommandParameter="3" Style="{DynamicResource buttonStyle}"/>
            <Button Grid.Column="4" Grid.Row="1" Command="{StaticResource Cmd_InputOperator}" CommandParameter="Plus" Style="{DynamicResource OperatorButtonStyle}">
                <iconPacks:PackIconMaterial Kind="Plus"/>
            </Button>
            
            <Button Grid.Column="0" Grid.Row="2" Content="4" Command="{StaticResource Cmd_InputNumber}" CommandParameter="4" Style="{DynamicResource buttonStyle}"/>            
            <Button Grid.Column="1" Grid.Row="2" Content="5" Command="{StaticResource Cmd_InputNumber}" CommandParameter="5" Style="{DynamicResource buttonStyle}"/>
            <Button Grid.Column="2" Grid.Row="2" Content="6" Command="{StaticResource Cmd_InputNumber}" CommandParameter="6" Style="{DynamicResource buttonStyle}"/>
            <Button Grid.Column="4" Grid.Row="2" Command="{StaticResource Cmd_InputOperator}" CommandParameter="Minus" Style="{DynamicResource OperatorButtonStyle}">
                <iconPacks:PackIconMaterial Kind="Minus"/>
            </Button>
            
            <Button Grid.Column="0" Grid.Row="3" Content="7" Command="{StaticResource Cmd_InputNumber}" CommandParameter="7" Style="{DynamicResource buttonStyle}"/>
            <Button Grid.Column="1" Grid.Row="3" Content="8" Command="{StaticResource Cmd_InputNumber}" CommandParameter="8" Style="{DynamicResource buttonStyle}"/>
            <Button Grid.Column="2" Grid.Row="3" Content="9" Command="{StaticResource Cmd_InputNumber}" CommandParameter="9" Style="{DynamicResource buttonStyle}"/>
            <Button Grid.Column="4" Grid.Row="3" Command="{StaticResource Cmd_InputOperator}" CommandParameter="Multiply" Style="{DynamicResource OperatorButtonStyle}">
                <iconPacks:PackIconMaterial Kind="Multiplication"/>
            </Button>
            
            <Button Grid.Column="0" Grid.Row="4" Content="0" Command="{StaticResource Cmd_InputNumber}" CommandParameter="0" Style="{DynamicResource buttonStyle}"/>
            <Button Grid.Column="1" Grid.Row="4" Content="{x:Static resx:Resources.DecimalPoint}" Command="{StaticResource Cmd_InputNumber}" CommandParameter="{x:Static resx:Resources.DecimalPoint}" Style="{DynamicResource OperatorButtonStyle}"/>
            <Button Grid.Column="2" Grid.Row="4" Command="{StaticResource Cmd_Equals}" Style="{DynamicResource OperatorButtonStyle}">
                <iconPacks:PackIconMaterial Kind="Equal"/>
            </Button>
            <Button Grid.Column="4"  Grid.Row="4" Command="{StaticResource Cmd_InputOperator}" CommandParameter="Divide" Style="{DynamicResource OperatorButtonStyle}">
                <iconPacks:PackIconMaterial Kind="Division"/>
            </Button>
        </Grid>
    </DockPanel>
</mahapps:MetroWindow>
